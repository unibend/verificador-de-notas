#!/usr/bin/env python3
"""
Smart Launcher for UNETI Grade Checker
Checks the configuration status and runs the appropriate script.
"""

import os
import sys
import re
import subprocess
import platform
from datetime import datetime

def print_banner():
    """Display program banner"""
    print("=" * 60)
    print("üöÄ LANZADOR INTELIGENTE - VERIFICADOR DE NOTAS UNETI")
    print("=" * 60)
    print("Detectando configuraci√≥n...")
    print()

def get_script_directory():
    """Get the directory where the script is located"""
    # If the script is being executed as a compiled .exe
    if getattr(sys, 'frozen', False):
        return os.path.dirname(sys.executable)
    else:
        return os.path.dirname(os.path.abspath(__file__))

def check_grade_checker_file():
    """Check the grade_checker.py file and return its status"""
    script_dir = get_script_directory()
    grade_checker_path = os.path.join(script_dir, "grade_checker.py")
    
    print(f"üìÇ Buscando archivo en: {grade_checker_path}")
    
    # Check if file exists
    if not os.path.exists(grade_checker_path):
        return "missing", None, grade_checker_path
    
    try:
        # Read the file
        with open(grade_checker_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Look for the API_TOKEN line
        token_match = re.search(r'API_TOKEN\s*=\s*["\']([^"\']+)["\']', content)
        
        if not token_match:
            return "malformed", None, grade_checker_path
        
        token_value = token_match.group(1)
        
        # Check token status
        if token_value == "placeholder":
            return "unconfigured", token_value, grade_checker_path
        elif len(token_value) < 10:
            return "invalid", token_value, grade_checker_path
        elif re.match(r'^[a-fA-F0-9]{32,}$', token_value):
            # Looks like a valid token (hex string, 32+ characters)
            return "configured", token_value, grade_checker_path
        else:
            return "unknown", token_value, grade_checker_path
            
    except Exception as e:
        print(f"‚ùå Error al leer el archivo: {e}")
        return "error", None, grade_checker_path

def check_setup_file():
    """Check if setup.py exists"""
    script_dir = get_script_directory()
    setup_path = os.path.join(script_dir, "setup.py")

    if os.path.exists(setup_path):
        return True, setup_path
    else:
        return False, setup_path

def check_configurador_file():
    """Check if configurador.py exists"""
    script_dir = get_script_directory()
    configurador_path = os.path.join(script_dir, "configurador.py")
    
    if os.path.exists(configurador_path):
        return True, configurador_path
    else:
        return False, configurador_path

def run_script(script_path, script_name):
    """Run a Python script"""
    try:
        print(f"üöÄ Ejecutando {script_name}...")
        print("-" * 40)
        
        # Change to script directory
        original_dir = os.getcwd()
        script_dir = os.path.dirname(script_path)
        os.chdir(script_dir)
        
        # Execute the script
        result = subprocess.run([sys.executable, script_path], 
                              capture_output=False, text=True)
        
        # Restore original directory
        os.chdir(original_dir)
        
        return result.returncode == 0
        
    except Exception as e:
        print(f"‚ùå Error al ejecutar {script_name}: {e}")
        return False

def show_help():
    """Show help information"""
    print("=" * 60)
    print("üìñ AYUDA - VERIFICADOR DE NOTAS UNETI")
    print("=" * 60)
    print("Este lanzador detecta autom√°ticamente qu√© hacer bas√°ndose en la configuraci√≥n:")
    print()
    print("üîß ESTADOS DETECTADOS:")
    print("‚Ä¢ Sin configurar: Ejecuta el configurador autom√°ticamente")
    print("‚Ä¢ Configurado: Ejecuta el verificador de notas")
    print("‚Ä¢ Error: Muestra informaci√≥n de diagn√≥stico")
    print()
    print("üìÅ ARCHIVOS NECESARIOS:")
    print("‚Ä¢ grade_checker.py - Script principal del verificador")
    print("‚Ä¢ configurador.py - Script de configuraci√≥n inicial")
    print("‚Ä¢ run.py - Este lanzador inteligente")
    print()
    print("üîç DIAGN√ìSTICO:")
    print("‚Ä¢ Archivo faltante: Descargar archivos completos")
    print("‚Ä¢ Token inv√°lido: Ejecutar configurador nuevamente")
    print("‚Ä¢ Error de conexi√≥n: Verificar internet y credenciales")
    print("=" * 60)

def main():
    """Main function"""
    print_banner()
    
    # Check command line arguments
    if len(sys.argv) > 1:
        if sys.argv[1] in ['--help', '-h', 'help']:
            show_help()
            input("\nPresiona Enter para salir...")
            return
    
    # Check grade checker file status
    print("üîç Verificando estado de configuraci√≥n...")
    status, token_value, grade_checker_path = check_grade_checker_file()
    
    print(f"üìã Estado detectado: {status}")
    
    if status == "missing":
        print("‚ùå ARCHIVO FALTANTE")
        print("-" * 40)
        print(f"No se encontr√≥ el archivo 'grade_checker.py' en:")
        print(f"   {grade_checker_path}")
        print()
        print("üîß SOLUCI√ìN:")
        print("‚Ä¢ Descargar todos los archivos del verificador")
        print("‚Ä¢ Asegurarse de que est√©n en la misma carpeta")
        print("‚Ä¢ Ejecutar este lanzador nuevamente")
        
    elif status == "unconfigured":
        print("‚öôÔ∏è CONFIGURACI√ìN REQUERIDA")
        print("-" * 40)
        print("El verificador no est√° configurado (token = 'placeholder')")
        print("Ejecutando configurador autom√°ticamente...") # This line should ideally say "Ejecutando setup.py..."
        print()

        # Check if configurador exists
        # This part needs to be changed to check for setup.py instead of configurador.py
        setup_exists, setup_path = check_setup_file() # New function call
        
        if setup_exists:
            if run_script(setup_path, "setup"): # Run setup.py
                print("\n‚úÖ Configuraci√≥n completada!")
                print("El verificador ya est√° listo para usar.")
            else:
                print("\n‚ùå Error durante la configuraci√≥n.")
        else:
            print(f"‚ùå No se encontr√≥ el archivo 'setup.py' en:") # Updated message
            print(f"   {setup_path}")
            print("Descarga todos los archivos del verificador.")
    
    elif status == "configured":
        print("‚úÖ CONFIGURACI√ìN V√ÅLIDA")
        print("-" * 40)
        print("Token de API configurado correctamente")
        print("Ejecutando verificador de notas...")
        print()
        
        if run_script(grade_checker_path, "verificador de notas"):
            print("\n‚úÖ Verificaci√≥n completada!")
        else:
            print("\n‚ùå Error durante la verificaci√≥n.")
            print("Verifica tu conexi√≥n a internet y credenciales.")
    
    elif status == "invalid":
        print("‚ùå TOKEN INV√ÅLIDO")
        print("-" * 40)
        print(f"El token configurado parece ser inv√°lido: '{token_value}'")
        print("Un token v√°lido deber√≠a ser una cadena hexadecimal larga.")
        print()
        print("üîß SOLUCI√ìN:")
        print("‚Ä¢ Ejecutar el configurador nuevamente")
        print("‚Ä¢ Verificar credenciales de UNETI")
        print("‚Ä¢ Verificar conexi√≥n a internet")
        
        # Ask if user wants to reconfigure
        print()
        while True:
            response = input("¬øQuieres ejecutar el configurador ahora? (s/n): ").strip().lower()
            if response in ['s', 'si', 's√≠', 'y', 'yes']:
                config_exists, configurador_path = check_configurador_file()
                if config_exists:
                    run_script(configurador_path, "configurador")
                else:
                    print("‚ùå No se encontr√≥ el configurador.")
                break
            elif response in ['n', 'no']:
                break
            else:
                print("Por favor, responde 's' para s√≠ o 'n' para no.")
    
    elif status == "unknown":
        print("‚ö†Ô∏è TOKEN DESCONOCIDO")
        print("-" * 40)
        print(f"El token configurado tiene un formato inesperado: '{token_value[:20]}...'")
        print("Esto podr√≠a indicar:")
        print("‚Ä¢ Un token v√°lido con formato diferente")
        print("‚Ä¢ Un token corrupto")
        print("‚Ä¢ Modificaci√≥n manual del archivo")
        print()
        print("üîß RECOMENDACI√ìN:")
        print("‚Ä¢ Intentar ejecutar el verificador de todas formas")
        print("‚Ä¢ Si falla, reconfigurar con el configurador")
        
        # Ask user what to do
        print()
        while True:
            response = input("¬øIntentar ejecutar el verificador? (s/n): ").strip().lower()
            if response in ['s', 'si', 's√≠', 'y', 'yes']:
                if run_script(grade_checker_path, "verificador de notas"):
                    print("\n‚úÖ Verificaci√≥n completada!")
                else:
                    print("\n‚ùå Error durante la verificaci√≥n.")
                    print("Considera reconfigurar con el configurador.")
                break
            elif response in ['n', 'no']:
                break
            else:
                print("Por favor, responde 's' para s√≠ o 'n' para no.")
    
    elif status == "malformed":
        print("‚ùå ARCHIVO CORRUPTO")
        print("-" * 40)
        print("No se pudo encontrar la l√≠nea API_TOKEN en el archivo.")
        print("El archivo podr√≠a estar corrupto o modificado incorrectamente.")
        print()
        print("üîß SOLUCI√ìN:")
        print("‚Ä¢ Descargar una copia nueva del verificador")
        print("‚Ä¢ Restaurar desde el backup (grade_checker.py.backup)")
        print("‚Ä¢ Ejecutar el configurador nuevamente")
    
    elif status == "error":
        print("‚ùå ERROR DE LECTURA")
        print("-" * 40)
        print("No se pudo leer el archivo grade_checker.py")
        print("Verifica permisos de archivo y integridad.")
    
    # Final summary
    print("\n" + "=" * 60)
    print("üìã RESUMEN:")
    print(f"‚Ä¢ Archivo principal: {grade_checker_path}")
    print(f"‚Ä¢ Estado: {status}")
    print(f"‚Ä¢ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    if status == "configured":
        print("‚Ä¢ ‚úÖ Listo para usar")
    elif status == "unconfigured":
        print("‚Ä¢ ‚öôÔ∏è Configuraci√≥n requerida")
    else:
        print("‚Ä¢ ‚ùå Requiere atenci√≥n")
    
    print("=" * 60)
    
    # Keep window open
    input("\nPresiona Enter para salir...")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå Operaci√≥n cancelada por el usuario.")
        input("\nPresiona Enter para salir...")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        import traceback
        traceback.print_exc()
        input("\nPresiona Enter para salir...")